#include <iostream>
#include <bitset>
#include <vector>
#include <iomanip>
#include <string>
#include <ctime>
using namespace std;

//string R(int L) //создаем кодировку рандомно
//{
//	string X = "01"; // стринговый массив 0 1 чтобы брать из него
//	string Y = ""; // пустой стринговый массив для заполнения
//	for (int i = 0; i < L; i++) //создаем строчку длинна кодировки которой 5
//	{
//		Y = Y + X[rand() % 2]; // прибавлякм 0 или 1 беря из X. Получается случайное число от 0 до 32767
//	}
//	return Y;
//}



int main()
{
	setlocale(LC_ALL, "Russian");
	srand(static_cast<unsigned int>(time(0)));

	string v1 = "1";
	string v2 = "0";
	string v3 = "";

	int L = 5; // Длина кодировки
	int i = 0;
	int j = 0;
	int N = 0;
	int Q = 0;// Рандомайз для соседа
	int Y = 0;
	int G = 5; // максимальное колличество соседей в кодировке из 5 символов
	string M[32]; // стринговый массив для 32 кодировоки
	vector <string> vec(5); //Стринговый вектор размера кодировки для соседей
	int S = 0;
	int P[32]; //Приспособленность
	int max = 0;
	string maxS = "";
	int K = 0; //Счетчик условия вхождения
	int x = 0; //Десятичное представление бинарного кода


	 while(j!=32)
	{
		string R;
		for (int i = 0; i < L; i++)   // Cоздаем случайную строку
		{
			int a = rand() % 2;
			R += '0' + a;
		}
		for (int i = 0; i < 32; i++) //проверка на повтор
		{
			if (M[i] == R)
			{
				K = 1;
				break;
			}
		}
		if (K == 0)
		{
			
			M[j] = R; //заносим кодировку в массив кодировок

			cout << R << '\t';

			for (int i = 0; i < L; i++)  // Преводим из двоичной в десятичную
			{
				x *= 2;
				x += R[i] - '0';
				R[i] = x;
			}
			P[j] = (x - pow(2, (L - 1))) * (x - pow(2, (L - 1))); cout << "ландшафт:" << P[j] << endl;
			cout << "x: " << x << endl;
			x = 0;
			j++;
		}
		K = 0;
	}
	cout << "Введите число шагов" << endl;
	cin >> N;
	i = 0;
	int RAND = 0; //Генерируем случайное число чтобы потом выбрать случайную кодировку
	RAND = rand() % 32;
	int C = 4;
	K = 0;
	j = 0;

	while (i < N)
	{
		i++;
		cout << '\n' << "Шаг = " << i << '\n';

		if (G > 0)
		{

			if (K == 0)
			{


				vec.resize(5); // создаем вектор размерностью 5 чистый
				for (int j = 0; j < 5; j++) // проходим по каждому элементу
				{
					if ((stoi(M[RAND].substr(j, 1))) == 0) // берем кодировку смотрим элемент 0 или 1 и заменяем
					{
						v3 = M[RAND];
						v3.replace(j, 1, v1);
						vec[j] = v3;
						v3 = "";

					}
					else
					{
						v3 = M[RAND];
						v3.replace(j, 1, v2);
						vec[j] = v3;
						v3 = "";

					}

				}
			}
			K = 1;
			cout << "Текущая строка = " << M[RAND] << '\n';
			cout << "Приспособленность = " << P[RAND] << '\n';
			if (P[RAND] > max) //Заносим max
			{
				//cout << "MAX МЕНЯЕТСЯ" << endl;
				//maxS = U[i];
				max = P[RAND];
			}
			cout << "Соседи ";
			for (int j = 0; j < G; j++)
			{
				cout << vec[j] << " "; // вывод всех соседей
			}
			if (C > 0)
			{
				Q = rand() % C; // Выбираем рандомного соседа из окрестности
			}
			else
			{
				Q = 0;
			}
			cout << '\n' << "Выбранный сосед " << Q;
			for (int j = 0; j < 32; j++) // Ищем приспособленность соседа
			{
				if (vec[Q] == M[j]) // Находим его в массиве. Если найдем его то найдем и приспособленность
				{
					cout << '\n' << "Приспособленность соседа " << P[j] << '\n';
					//break; почему не заканчивается?
					S = P[j];
					Y = j; // запоминаем позицию в массиве
					//continue; не работает
				}

			}
			if (max < S) // Если max меньше новой приспособленности
			{
				cout << "Замена max на " << i << " шаге" << '\n';
				max = S; // Присваиваем новый max
				RAND = Y;
				G = 5; //максимальное кол-во соседей
				K = 0;

				cout << "Текущий maxS " << M[RAND] << '\n';
				//Текущий макс и максS
			}
			else
			{
				auto iter = vec.cbegin(); //возвращаем итератор вектора который указывает на первый элемент
				vec.erase(iter + Q); //удаляет элемент iter+j

				G = G - 1;
				C = C - 1;
				cout << "Текущий maxS " << M[RAND] << '\n';
			}
		}
		else
		{
			//break;
			cout << '\n' << "Найден максимум" << endl;
			//cout << "max= " << max << '\n';
			//cout << "maxS= " << maxS << '\n';
			break;

		}


		//cout << '\n';
		cout << "Итоговый max= " << max << '\n';
		cout << "Итоговый maxS= " << M[RAND] << '\n';

		/*string b = M[j]; // выбор случайного значения (случайной строки в массиве)
		cout << "выбор случайного значения    " << b << endl;
		U[i] = b;
		cout << "Приспособленность" << P[j] << endl;*/

	}



}